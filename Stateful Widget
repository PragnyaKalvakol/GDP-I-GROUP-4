A Stateful Widget has its own mutable state that it needs to track. It is modified according to the user’s input. Stateless widgets should be used for building parts of User interfaces, especially when the UI doesn’t need to be updated.

There are two primary categories of StatefulWidgets.
- The first is one which allocates resources in State.initState and disposes of them in State.dispose, but which does not depend on InheritedWidgets or call State.setState. 
- Such widgets are commonly used at the root of an application or page, and communicate with subwidgets via ChangeNotifiers, Streams, or other such objects.

- The second category is widgets that use State.setState or depend on InheritedWidgets. 
- These will typically rebuild many times during the application's lifetime, and it is therefore important to minimize the impact of rebuilding such a widget.

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    return Container();
  }
}


This is a skeleton of a stateful widget subclass called YellowBird.

class YellowBird extends StatefulWidget {
  const YellowBird({ super.key });

  @override
  State<YellowBird> createState() => _YellowBirdState();
}

class _YellowBirdState extends State<YellowBird> {
  @override
  Widget build(BuildContext context) {
    return Container(color: const Color(0xFFFFE306));
  }
}
